export async function POST(req: Request) {
  console.log("üî• ChatGPT API iniciada");
  
  try {
    // Verificar se √© uma requisi√ß√£o v√°lida
    if (!req) {
      console.error("‚úó Request inv√°lido");
      return Response.json({ error: "Request inv√°lido" }, { status: 400 });
    }

    let body;
    try {
      body = await req.json();
      console.log("‚úì Body recebido:", body);
    } catch (parseError) {
      console.error("‚úó Erro ao parsear JSON do body:", parseError);
      return Response.json({ error: "JSON inv√°lido no body da requisi√ß√£o" }, { status: 400 });
    }
    
    const { messages } = body;
    
    if (!messages) {
      console.error("‚úó Messages n√£o fornecidas");
      return Response.json({ error: "Campo 'messages' √© obrigat√≥rio" }, { status: 400 });
    }
    
    if (!Array.isArray(messages)) {
      console.error("‚úó Messages inv√°lidas - n√£o √© array");
      return Response.json({ error: "Campo 'messages' deve ser um array" }, { status: 400 });
    }

    if (messages.length === 0) {
      console.error("‚úó Messages vazio");
      return Response.json({ error: "Array 'messages' n√£o pode estar vazio" }, { status: 400 });
    }

    // Verificar API Key
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      console.error("‚úó API Key n√£o encontrada");
      return Response.json({ error: "Configura√ß√£o da API inv√°lida - chave n√£o encontrada" }, { status: 500 });
    }

    if (!apiKey.startsWith('sk-')) {
      console.error("‚úó API Key formato inv√°lido");
      return Response.json({ error: "Configura√ß√£o da API inv√°lida - formato incorreto" }, { status: 500 });
    }

    console.log("‚úì API Key encontrada:", apiKey.substring(0, 20) + "...");

    // Prompt do sistema aprimorado
    const systemPrompt = `Voc√™ √© o SommeliAI, sommelier digital especializado em vinhos. Fale com simpatia, bom humor e sem esnobismo. Use linguagem leve e divertida. Sua miss√£o √© ajudar qualquer pessoa - mesmo quem n√£o entende nada de vinhos - a fazer uma boa escolha.

REGRA CR√çTICA OBRIGAT√ìRIA: TODA resposta DEVE terminar com exatamente 3 op√ß√µes numeradas (1, 2, 3). NUNCA envie uma resposta sem essas 3 op√ß√µes numeradas. Esta regra √© ABSOLUTA e n√£o admite exce√ß√µes.

REGRA ESPECIAL OBRIGAT√ìRIA PARA TABELAS: Quando o cliente pedir uma COMPARA√á√ÉO ENTRE DOIS VINHOS, voc√™ DEVE responder usando OBRIGATORIAMENTE o formato de tabela Markdown.

Fluxo de atendimento:
1. D√™ as boas-vindas e ofere√ßa estas tr√™s op√ß√µes numeradas ao cliente:
   "Ol√°! Sou o SommeliAI ‚Äî posso te ajudar a escolher o vinho ideal. Me conta o que voc√™ procura!
   
   1. T√¥ em d√∫vida entre dois vinhos
   2. Quero uma sugest√£o pra uma ocasi√£o especial
   3. Quero um vinho que combine com o prato que eu escolhi"

Lembre-se: voc√™ √© leve, acess√≠vel e divertido. Nada de termos complicados ou linguagem esnobe.`;

    const systemMessage = {
      role: "system",
      content: systemPrompt,
    };

    const fullMessages = [systemMessage, ...messages];
    console.log("‚úì Mensagens preparadas");

    // Fazer requisi√ß√£o para OpenAI
    console.log("üöÄ Chamando OpenAI...");
    
    let response;
    try {
      response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          temperature: 0.7,
          max_tokens: 800,
          messages: fullMessages,
        }),
      });
    } catch (fetchError) {
      console.error("‚úó Erro na requisi√ß√£o para OpenAI:", fetchError);
      return Response.json({ 
        error: "Erro de rede ao conectar com OpenAI" 
      }, { status: 503 });
    }

    console.log("‚úì Resposta OpenAI:", response.status, response.statusText);

    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
      } catch (parseError) {
        console.error("‚úó Erro ao parsear resposta de erro da OpenAI:", parseError);
        errorData = { 
          error: { 
            message: `HTTP ${response.status}: ${response.statusText}` 
          } 
        };
      }
      
      console.error("‚úó Erro OpenAI:", {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });
      
      let errorMessage = "Erro na API da OpenAI";
      if (response.status === 401) {
        errorMessage = "API Key inv√°lida ou expirada";
      } else if (response.status === 429) {
        errorMessage = "Limite de uso da API excedido";
      } else if (response.status === 503) {
        errorMessage = "Servi√ßo da OpenAI temporariamente indispon√≠vel";
      } else if (response.status === 400) {
        errorMessage = "Requisi√ß√£o inv√°lida para a OpenAI";
      }
      
      return Response.json({ 
        error: `${errorMessage}: ${errorData?.error?.message || errorData?.message || response.status}` 
      }, { status: response.status });
    }

    let data;
    try {
      data = await response.json();
    } catch (parseError) {
      console.error("‚úó Erro ao parsear resposta da OpenAI:", parseError);
      return Response.json({ error: "Resposta inv√°lida da OpenAI" }, { status: 500 });
    }
    
    const resposta = data?.choices?.[0]?.message?.content?.trim();
    
    if (!resposta) {
      console.error("‚úó Resposta vazia da OpenAI:", data);
      return Response.json({ error: "Resposta vazia da API da OpenAI" }, { status: 500 });
    }

    console.log("‚úÖ Sucesso! Resposta:", resposta.length, "caracteres");
    console.log("üì§ Enviando resposta para frontend:", { content: resposta });
    
    return Response.json({ content: resposta });

  } catch (error) {
    console.error("‚úó ERRO GERAL:", error);
    return Response.json({ 
      error: `Erro inesperado: ${error instanceof Error ? error.message : "Erro desconhecido"}` 
    }, { status: 500 });
  }
}

export async function OPTIONS() {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}
